{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "body": "## \ud83d\udc1b Bug description\r\n\r\nCurrently, the elements of lists are duplicated by the parser `PMCXMLParser`.\r\n\r\n\u26a0\ufe0f  This bug could also happen for `<def-list>` (see below) or, actually, any other tag.\r\n\r\nThere are two possible types of lists: [`<list>`](https://jats.nlm.nih.gov/archiving/tag-library/1.2/element/list.html) and [`<def-list>`](https://jats.nlm.nih.gov/archiving/tag-library/1.2/element/def-list.html).\r\n\r\n\r\n## To reproduce\r\nExample XML of an article with a list in a paragraph:\r\n\r\n```xml\r\n<article>\r\n    <body>\r\n        <p>\r\n            <list list-type=\"bullet\">\r\n                <list-item>\r\n                    <p>List item 1.</p>\r\n                </list-item>\r\n                <list-item>\r\n                    <p>List item 2.</p>\r\n                </list-item>\r\n            </list>\r\n        </p>\r\n    </body>\r\n</article>\r\n```\r\n\r\nParsing of such article file (article.xml):\r\n\r\n```python\r\nfrom bluesearch.database.article import JATSXMLParser\r\n\r\nparser = JATSXMLParser(\"article.xml\")\r\nfor paragraph in parser.paragraphs:\r\n  print(paragraph)\r\n```\r\n\r\nDuplicated outputs:\r\n\r\n```\r\n('', 'List item 1.\\n                List item 2.')\r\n('', 'List item 1.')\r\n('', 'List item 2.')\r\n```\r\n\r\n## Expected behavior\r\n\r\nOutput:\r\n\r\n```\r\n('', 'List item 1.')\r\n('', 'List item 2.')\r\n```\r\n",
    "closed_at": "2021-11-23T14:47:54Z",
    "closed_by": {
        "avatar_url": "https://avatars.githubusercontent.com/u/17013890?v=4",
        "events_url": "https://api.github.com/users/FrancescoCasalegno/events{/privacy}",
        "followers_url": "https://api.github.com/users/FrancescoCasalegno/followers",
        "following_url": "https://api.github.com/users/FrancescoCasalegno/following{/other_user}",
        "gists_url": "https://api.github.com/users/FrancescoCasalegno/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/FrancescoCasalegno",
        "id": 17013890,
        "login": "FrancescoCasalegno",
        "node_id": "MDQ6VXNlcjE3MDEzODkw",
        "organizations_url": "https://api.github.com/users/FrancescoCasalegno/orgs",
        "received_events_url": "https://api.github.com/users/FrancescoCasalegno/received_events",
        "repos_url": "https://api.github.com/users/FrancescoCasalegno/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/FrancescoCasalegno/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/FrancescoCasalegno/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/FrancescoCasalegno"
    },
    "comments": 7,
    "comments_content": [
        {
            "author_association": "CONTRIBUTOR",
            "body": "Like dicussed in the meeting, maybe fixing #425 will automatically fix this duplication issue.",
            "created_at": "2021-11-08T08:18:47Z",
            "html_url": "https://github.com/BlueBrain/Search/issues/496#issuecomment-962911961",
            "id": 962911961,
            "issue_url": "https://api.github.com/repos/BlueBrain/Search/issues/496",
            "node_id": "IC_kwDODu5QYM45ZN7Z",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/BlueBrain/Search/issues/comments/962911961/reactions"
            },
            "updated_at": "2021-11-08T08:18:47Z",
            "url": "https://api.github.com/repos/BlueBrain/Search/issues/comments/962911961",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8017698?v=4",
                "events_url": "https://api.github.com/users/Stannislav/events{/privacy}",
                "followers_url": "https://api.github.com/users/Stannislav/followers",
                "following_url": "https://api.github.com/users/Stannislav/following{/other_user}",
                "gists_url": "https://api.github.com/users/Stannislav/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/Stannislav",
                "id": 8017698,
                "login": "Stannislav",
                "node_id": "MDQ6VXNlcjgwMTc2OTg=",
                "organizations_url": "https://api.github.com/users/Stannislav/orgs",
                "received_events_url": "https://api.github.com/users/Stannislav/received_events",
                "repos_url": "https://api.github.com/users/Stannislav/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/Stannislav/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Stannislav/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/Stannislav"
            }
        },
        {
            "author_association": "COLLABORATOR",
            "body": "After analysing this issue, I am wondering if we should not keep everything into one paragraph. \r\n\r\nConcrete example: \r\nNote: `text` comes from `/raid/projects/bbs/pmc/comm_use/Environ_Sci_Eur/PMC5602039.nxml`.\r\n\r\n```python\r\nfrom defusedxml import ElementTree\r\n\r\ntext = \"\"\"<p id=\"Par28\">Due to the tight interconnection of drinking water and groundwater,\r\n the latter is submitted to the same limit values (0.1&#x000a0;&#x000b5;g/L \r\nfor single substances and 0.5&#x000a0;&#x000b5;g/L for the sum of substances, \r\nGroundwater Directive 2006/118/EC) [<xref ref-type=\"bibr\" rid=\"CR23\">23</xref>]. \r\nAlthough these directives fix the limit values, no criteria for the definition of \r\nrelevant and non-relevant metabolites were provided at that stage, \r\nleading to uncertainty for regulators and notifiers. To avoid further misinterpretations, \r\na definition of the relevance criteria was finally delivered in 2000. \r\nAccording to the EU DG Sanco Guidance, a metabolite is relevant if:\r\n<list list-type=\"alpha-lower\"><list-item><p id=\"Par29\">It has comparable biological target activity \r\n(&#x02265;50%) to the active substance, or</p></list-item><list-item><p id=\"Par30\">\r\nIt has toxicological properties that are regarded as severe or unacceptable\r\n (e.g., genotoxic, or classified as toxic or very toxic) [<xref ref-type=\"bibr\" rid=\"CR24\">24</xref>].\r\n</p></list-item></list></p>\"\"\"\r\nfor p in ElementTree.fromstring(test).findall(\".//p\"):\r\n    print(\"\".join(p.itertext()))\r\n```\r\n\r\nOutputs:\r\n```\r\nIt has comparable biological target activity (\u226550%) to the active substance, or\r\nIt has toxicological properties that are regarded as severe or unacceptable (e.g., genotoxic, or classified as toxic or very toxic) [24].\r\n```\r\n\r\nWhy ?\r\n- A part is missing `Due to the tight interconnection of drinking water and groundwater, ...`\r\n- Does it make sense to keep small paragraphs like the two from the outputs instead of a big one ?",
            "created_at": "2021-11-08T16:17:25Z",
            "html_url": "https://github.com/BlueBrain/Search/issues/496#issuecomment-963318461",
            "id": 963318461,
            "issue_url": "https://api.github.com/repos/BlueBrain/Search/issues/496",
            "node_id": "IC_kwDODu5QYM45axK9",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/BlueBrain/Search/issues/comments/963318461/reactions"
            },
            "updated_at": "2021-11-08T16:17:25Z",
            "url": "https://api.github.com/repos/BlueBrain/Search/issues/comments/963318461",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/47669575?v=4",
                "events_url": "https://api.github.com/users/EmilieDel/events{/privacy}",
                "followers_url": "https://api.github.com/users/EmilieDel/followers",
                "following_url": "https://api.github.com/users/EmilieDel/following{/other_user}",
                "gists_url": "https://api.github.com/users/EmilieDel/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/EmilieDel",
                "id": 47669575,
                "login": "EmilieDel",
                "node_id": "MDQ6VXNlcjQ3NjY5NTc1",
                "organizations_url": "https://api.github.com/users/EmilieDel/orgs",
                "received_events_url": "https://api.github.com/users/EmilieDel/received_events",
                "repos_url": "https://api.github.com/users/EmilieDel/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/EmilieDel/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/EmilieDel/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/EmilieDel"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Hi @EmilieDel,\r\n\r\nI think the issue is coming from the use of `itertext()`.\r\n\r\nIndeed, using it as intended ([doc](https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.Element.itertext)) gives the expected results:\r\n\r\n```python\r\ncontent = ElementTree.fromstring(text)\r\nprint(\"\".join(content.itertext()))\r\n```\r\n\r\nwhich gives:\r\n\r\n```\r\nDue to the tight [...] a metabolite is relevant if:\r\nIt has comparable [...], or\r\nIt has toxicological [...].\r\n```",
            "created_at": "2021-11-09T17:38:41Z",
            "html_url": "https://github.com/BlueBrain/Search/issues/496#issuecomment-964380530",
            "id": 964380530,
            "issue_url": "https://api.github.com/repos/BlueBrain/Search/issues/496",
            "node_id": "IC_kwDODu5QYM45e0dy",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 1,
                "total_count": 1,
                "url": "https://api.github.com/repos/BlueBrain/Search/issues/comments/964380530/reactions"
            },
            "updated_at": "2021-11-09T17:39:01Z",
            "url": "https://api.github.com/repos/BlueBrain/Search/issues/comments/964380530",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/4543376?v=4",
                "events_url": "https://api.github.com/users/pafonta/events{/privacy}",
                "followers_url": "https://api.github.com/users/pafonta/followers",
                "following_url": "https://api.github.com/users/pafonta/following{/other_user}",
                "gists_url": "https://api.github.com/users/pafonta/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/pafonta",
                "id": 4543376,
                "login": "pafonta",
                "node_id": "MDQ6VXNlcjQ1NDMzNzY=",
                "organizations_url": "https://api.github.com/users/pafonta/orgs",
                "received_events_url": "https://api.github.com/users/pafonta/received_events",
                "repos_url": "https://api.github.com/users/pafonta/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/pafonta/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/pafonta/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/pafonta"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "@EmilieDel I think the problem in your example is that the first `<p>` is the top element and it's not covered by `findall`, because it's looking for its sub-elements, but not at the top element itself.\r\n\r\nJust for clarity, here's the re-formatted example you gave:\r\n```xml\r\n<p id=\"Par28\">\r\nDue to the tight interconnection of drinking water and groundwater,\r\n the latter is submitted to the same limit values (0.1&#x000a0;&#x000b5;g/L \r\nfor single substances and 0.5&#x000a0;&#x000b5;g/L for the sum of substances, \r\nGroundwater Directive 2006/118/EC) [<xref ref-type=\"bibr\" rid=\"CR23\">23</xref>]. \r\nAlthough these directives fix the limit values, no criteria for the definition of \r\nrelevant and non-relevant metabolites were provided at that stage, \r\nleading to uncertainty for regulators and notifiers. To avoid further misinterpretations, \r\na definition of the relevance criteria was finally delivered in 2000. \r\nAccording to the EU DG Sanco Guidance, a metabolite is relevant if:\r\n    <list list-type=\"alpha-lower\">\r\n        <list-item>\r\n            <p id=\"Par29\">\r\n            It has comparable biological target activity \r\n            (&#x02265;50%) to the active substance, or\r\n            </p>\r\n        </list-item>\r\n        <list-item>\r\n            <p id=\"Par30\">\r\n            It has toxicological properties that are regarded as severe or unacceptable\r\n             (e.g., genotoxic, or classified as toxic or very toxic) [<xref ref-type=\"bibr\" rid=\"CR24\">24</xref>].\r\n            </p>\r\n        </list-item>\r\n    </list>\r\n</p>\r\n```\r\nand to fix the issue it's enough to wrap everything into an arbitrary top-level element, something like this:\r\n```python\r\ntext2 = \"<xml><p id=\"Par28\">...</p></xml>\"\r\n```\r\nSo, starting with your example I get:\r\n```python\r\n>>> text2 = f\"<xml>{text}</xml>\"\r\n>>> content = ElementTree.fromstring(text2)\r\n>>> for element in content.findall(\".//p\"):\r\n...     print(\"\".join(element.itertext()))\r\n```\r\n```\r\nDue to the tight interconnection of drinking water and groundwater,\r\n the latter is submitted to the same limit values (0.1\u00a0\u00b5g/L \r\nfor single substances and 0.5\u00a0\u00b5g/L for the sum of substances, \r\nGroundwater Directive 2006/118/EC) [23]. \r\nAlthough these directives fix the limit values, no criteria for the definition of \r\nrelevant and non-relevant metabolites were provided at that stage, \r\nleading to uncertainty for regulators and notifiers. To avoid further misinterpretations, \r\na definition of the relevance criteria was finally delivered in 2000. \r\nAccording to the EU DG Sanco Guidance, a metabolite is relevant if:\r\nIt has comparable biological target activity \r\n(\u226550%) to the active substance, or\r\nIt has toxicological properties that are regarded as severe or unacceptable\r\n (e.g., genotoxic, or classified as toxic or very toxic) [24].\r\n\r\nIt has comparable biological target activity \r\n(\u226550%) to the active substance, or\r\n\r\nIt has toxicological properties that are regarded as severe or unacceptable\r\n (e.g., genotoxic, or classified as toxic or very toxic) [24].\r\n```\r\nOne can see that we do find all `<p>` elements.\r\n\r\nThis actually also showcases where the duplication comes from. [The `.//` syntax of XPath](https://docs.python.org/3/library/xml.etree.elementtree.html#supported-xpath-syntax) is recursive, but so is `element.itertext()`. This way you parse the inner paragraphs twice:\r\n* When you call `element.itertext()` on the outer `<p>`\r\n* When you find the inner `<p>`s via `findall(\".//p\")` and then call `element.itertext()` on them again.",
            "created_at": "2021-11-15T10:08:01Z",
            "html_url": "https://github.com/BlueBrain/Search/issues/496#issuecomment-968730952",
            "id": 968730952,
            "issue_url": "https://api.github.com/repos/BlueBrain/Search/issues/496",
            "node_id": "IC_kwDODu5QYM45valI",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/BlueBrain/Search/issues/comments/968730952/reactions"
            },
            "updated_at": "2021-11-15T10:08:01Z",
            "url": "https://api.github.com/repos/BlueBrain/Search/issues/comments/968730952",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8017698?v=4",
                "events_url": "https://api.github.com/users/Stannislav/events{/privacy}",
                "followers_url": "https://api.github.com/users/Stannislav/followers",
                "following_url": "https://api.github.com/users/Stannislav/following{/other_user}",
                "gists_url": "https://api.github.com/users/Stannislav/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/Stannislav",
                "id": 8017698,
                "login": "Stannislav",
                "node_id": "MDQ6VXNlcjgwMTc2OTg=",
                "organizations_url": "https://api.github.com/users/Stannislav/orgs",
                "received_events_url": "https://api.github.com/users/Stannislav/received_events",
                "repos_url": "https://api.github.com/users/Stannislav/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/Stannislav/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Stannislav/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/Stannislav"
            }
        },
        {
            "author_association": "COLLABORATOR",
            "body": "Thanks @pafonta, @Stannislav for the feedback! \r\n\r\nTo @pafonta:\r\n\r\nI agree we could say the problem is coming from `itertext()`, in this case it is a bit unfortunate that the children are themselves paragraphs. However, in most of the cases, it is nice to have `itertext` to handle all the children (bold, italic, URL, ...) in the paragraph directly with `itertext()`. What do you think ?\r\n\r\nTo @Stannislav:\r\n\r\nSorry, my example was maybe not clear. I totally agree with your comment, it is indeed the reason this PR was opened (and also what is shown in the description of the PR). What I wanted to explain by the second example (the one you mention in your comment) is that if the parent `<p>` contains text then only parsing the children `<p>` is not enough (what was suggested as solution of the issue). \r\n\r\nThe second example was there to explain why I think we should only keep the parent `<p>` and do `element.itertext()` on it to reconstruct the entire paragraph without losing any information. It also means that we can ignore the children as they are parsed once in the parent paragraph. For info, this is in fact the current implementation of this. However, I am aware that it makes the solution/code more complicated, as @pafonta pointed out. So, I am totally open to suggestions! \r\n\r\nMoreover, as you pointed out `.//` is recursive, I thought first about getting rid of the double-slash in the `XPath`. However, this solution seems impossible as the paths vary a lot and it sounds complicated to predict all of them. ",
            "created_at": "2021-11-15T10:18:54Z",
            "html_url": "https://github.com/BlueBrain/Search/issues/496#issuecomment-968740907",
            "id": 968740907,
            "issue_url": "https://api.github.com/repos/BlueBrain/Search/issues/496",
            "node_id": "IC_kwDODu5QYM45vdAr",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/BlueBrain/Search/issues/comments/968740907/reactions"
            },
            "updated_at": "2021-11-15T10:32:20Z",
            "url": "https://api.github.com/repos/BlueBrain/Search/issues/comments/968740907",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/47669575?v=4",
                "events_url": "https://api.github.com/users/EmilieDel/events{/privacy}",
                "followers_url": "https://api.github.com/users/EmilieDel/followers",
                "following_url": "https://api.github.com/users/EmilieDel/following{/other_user}",
                "gists_url": "https://api.github.com/users/EmilieDel/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/EmilieDel",
                "id": 47669575,
                "login": "EmilieDel",
                "node_id": "MDQ6VXNlcjQ3NjY5NTc1",
                "organizations_url": "https://api.github.com/users/EmilieDel/orgs",
                "received_events_url": "https://api.github.com/users/EmilieDel/received_events",
                "repos_url": "https://api.github.com/users/EmilieDel/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/EmilieDel/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/EmilieDel/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/EmilieDel"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Hello @EmilieDel,\r\n\r\n> I agree we could say the problem is coming from `itertext()`, in this case it is a bit unfortunate that the children are themselves paragraphs. However, in most of the cases, it is nice to have `itertext` to handle all the children (bold, italic, URL, ...) in the paragraph directly with `itertext()`. What do you think ?\r\n\r\nI see. To do so, using a `non` recursive approach - not using `findall(\".//p\")` - should give the expected behaviour. One could iterate through the XML tree instead to do such thing.",
            "created_at": "2021-11-15T14:04:22Z",
            "html_url": "https://github.com/BlueBrain/Search/issues/496#issuecomment-968941802",
            "id": 968941802,
            "issue_url": "https://api.github.com/repos/BlueBrain/Search/issues/496",
            "node_id": "IC_kwDODu5QYM45wODq",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/BlueBrain/Search/issues/comments/968941802/reactions"
            },
            "updated_at": "2021-11-15T14:04:22Z",
            "url": "https://api.github.com/repos/BlueBrain/Search/issues/comments/968941802",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/4543376?v=4",
                "events_url": "https://api.github.com/users/pafonta/events{/privacy}",
                "followers_url": "https://api.github.com/users/pafonta/followers",
                "following_url": "https://api.github.com/users/pafonta/following{/other_user}",
                "gists_url": "https://api.github.com/users/pafonta/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/pafonta",
                "id": 4543376,
                "login": "pafonta",
                "node_id": "MDQ6VXNlcjQ1NDMzNzY=",
                "organizations_url": "https://api.github.com/users/pafonta/orgs",
                "received_events_url": "https://api.github.com/users/pafonta/received_events",
                "repos_url": "https://api.github.com/users/pafonta/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/pafonta/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/pafonta/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/pafonta"
            }
        },
        {
            "author_association": "COLLABORATOR",
            "body": "> I see. To do so, using a non recursive approach - not using findall(\".//p\") - should give the expected behaviour. One could iterate through the XML tree instead to do such thing.\r\n\r\nAfter discussing with @Stannislav, we will go for that solution (i.e. iterate through the XML tree). I will try to implement this asap! \r\n\r\nThanks a lot for the feedback @Stannislav and @pafonta :)\r\n",
            "created_at": "2021-11-15T14:39:37Z",
            "html_url": "https://github.com/BlueBrain/Search/issues/496#issuecomment-968975480",
            "id": 968975480,
            "issue_url": "https://api.github.com/repos/BlueBrain/Search/issues/496",
            "node_id": "IC_kwDODu5QYM45wWR4",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/BlueBrain/Search/issues/comments/968975480/reactions"
            },
            "updated_at": "2021-11-15T14:40:27Z",
            "url": "https://api.github.com/repos/BlueBrain/Search/issues/comments/968975480",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/47669575?v=4",
                "events_url": "https://api.github.com/users/EmilieDel/events{/privacy}",
                "followers_url": "https://api.github.com/users/EmilieDel/followers",
                "following_url": "https://api.github.com/users/EmilieDel/following{/other_user}",
                "gists_url": "https://api.github.com/users/EmilieDel/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/EmilieDel",
                "id": 47669575,
                "login": "EmilieDel",
                "node_id": "MDQ6VXNlcjQ3NjY5NTc1",
                "organizations_url": "https://api.github.com/users/EmilieDel/orgs",
                "received_events_url": "https://api.github.com/users/EmilieDel/received_events",
                "repos_url": "https://api.github.com/users/EmilieDel/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/EmilieDel/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/EmilieDel/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/EmilieDel"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/BlueBrain/Search/issues/496/comments",
    "created_at": "2021-11-05T15:40:29Z",
    "events_url": "https://api.github.com/repos/BlueBrain/Search/issues/496/events",
    "html_url": "https://github.com/BlueBrain/Search/issues/496",
    "id": 1045985611,
    "labels": [
        {
            "color": "d73a4a",
            "default": false,
            "description": "Something isn't working",
            "id": 1938483675,
            "name": "\ud83d\udc1b bug fix",
            "node_id": "MDU6TGFiZWwxOTM4NDgzNjc1",
            "url": "https://api.github.com/repos/BlueBrain/Search/labels/%F0%9F%90%9B%20bug%20fix"
        },
        {
            "color": "1D76DB",
            "default": false,
            "description": "Creation and maintenance of a database of scientific literature",
            "id": 2812917713,
            "name": "\ud83d\uddc4\ufe0f database",
            "node_id": "MDU6TGFiZWwyODEyOTE3NzEz",
            "url": "https://api.github.com/repos/BlueBrain/Search/labels/%F0%9F%97%84%EF%B8%8F%20database"
        }
    ],
    "labels_url": "https://api.github.com/repos/BlueBrain/Search/issues/496/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDODu5QYM4-WHlL",
    "number": 496,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/BlueBrain/Search/issues/496/reactions"
    },
    "repository_url": "https://api.github.com/repos/BlueBrain/Search",
    "state": "closed",
    "state_reason": "completed",
    "timeline_url": "https://api.github.com/repos/BlueBrain/Search/issues/496/timeline",
    "title": "Fix parsing of <list> for JATS XML",
    "updated_at": "2021-11-23T14:47:54Z",
    "url": "https://api.github.com/repos/BlueBrain/Search/issues/496",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/4543376?v=4",
        "events_url": "https://api.github.com/users/pafonta/events{/privacy}",
        "followers_url": "https://api.github.com/users/pafonta/followers",
        "following_url": "https://api.github.com/users/pafonta/following{/other_user}",
        "gists_url": "https://api.github.com/users/pafonta/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/pafonta",
        "id": 4543376,
        "login": "pafonta",
        "node_id": "MDQ6VXNlcjQ1NDMzNzY=",
        "organizations_url": "https://api.github.com/users/pafonta/orgs",
        "received_events_url": "https://api.github.com/users/pafonta/received_events",
        "repos_url": "https://api.github.com/users/pafonta/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/pafonta/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/pafonta/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/pafonta"
    }
}