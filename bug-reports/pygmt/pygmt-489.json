{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "body": "**Description of the problem**\r\n\r\nPyGMT provides the [`load_earth_relief()`](https://github.com/GenericMappingTools/pygmt/blob/86c46f075d6f68a1367bc0fad161f98ba99c14c3/pygmt/datasets/earth_relief.py#L11) function to load GMT's earth_relief data as a `xarray.DataArray` object, so that users can plot it or directly manipulate the data. The function won't work in GMT 6.1.0.\r\n\r\nCurrently, the `load_earth_relief()` function first calls the [`which()`](https://github.com/GenericMappingTools/pygmt/blob/86c46f075d6f68a1367bc0fad161f98ba99c14c3/pygmt/datasets/earth_relief.py#L38) function to get the full path of the data (`which` will download the data if it's not available locally), and then read the netCDF file in by `grid = xr.open_dataarray(fname)`. It works well with GMT 6.0.0 because each resolution is stored as a single grid.\r\n\r\nIn GMT 6.1.0, we will have many problems:\r\n\r\n1. earth relief data with resolutions >= 06m are stored as a single grid, e.g., `earth_relief_06m_p.grd`. The function still works\r\n2. earth relief data with resolutions <= 05m are stored as several smaller tiles. If you want to plot an earth relief map in a 3\u00b0x3\u00b0 region using the 03s data, you don't have to download the ~6.8 GB large file anymore, i.e., the command\r\n`gmt grdimage @earth_relief_03s -R120/123/30/33 -pdf map` will only need to download 8 tiles (~3 MB) instead of the old 6.8 GB single grid. However, `gmt which @earth_relief_03s -Ga` (`-Ga` means automatically putting the data in the appropriate directory, which is new in GMT 6.1.) will download all tiles (hundreds or thousands of tiles, ~6.8 GB in total). That's definitely what we want to avoid.\r\n\r\n**Solutions**\r\n\r\nAFAIK, there are no easy solutions. \r\n\r\n1. We can do `gmt grdinfo @earth_relief_03s -R120/123/30/33` to download the tiles (ignore the output from `grdinfo`) and use `gmt which` to return the full paths that exist locally (it will return all existing tiles, including tiles outside our target region). However, since the data are stored as tiles, we have to read several files and merge them. It's more complicated for 03s and 01s data. The original 03s and 01s data don't have data in oceans and GMT fills the ocean with the 15s data. Thus we have to resample the data and merge them.\r\n\r\n2. GMT provides a C API function (perhaps also new in GMT 6.1.0) [`GMT_Get_FilePath()`](https://docs.generic-mapping-tools.org/dev/api.html#gmt-get-filepath) to return the full path of a file. As per the documentation, it can also download remote files (e.g., earth relief data) if it's not available locally. However, (1) the API is not tested by us yet; (2) it's not clear if it can accept a *region* argument to download tiles in a specified region; (3) even though the tiles in the specified region are correctly downloaded with full paths returned, we still have to manually resample and merge them.\r\n\r\nWe need a better and working solution here, or we have to seek support from the upstream GMT, and ask them to provide a  new API function which returns the final grid (resampled and merged).",
    "closed_at": "2020-07-23T06:00:43Z",
    "closed_by": {
        "avatar_url": "https://avatars.githubusercontent.com/u/3974108?v=4",
        "events_url": "https://api.github.com/users/seisman/events{/privacy}",
        "followers_url": "https://api.github.com/users/seisman/followers",
        "following_url": "https://api.github.com/users/seisman/following{/other_user}",
        "gists_url": "https://api.github.com/users/seisman/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/seisman",
        "id": 3974108,
        "login": "seisman",
        "node_id": "MDQ6VXNlcjM5NzQxMDg=",
        "organizations_url": "https://api.github.com/users/seisman/orgs",
        "received_events_url": "https://api.github.com/users/seisman/received_events",
        "repos_url": "https://api.github.com/users/seisman/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/seisman/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/seisman/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/seisman"
    },
    "comments": 5,
    "comments_content": [
        {
            "author_association": "MEMBER",
            "body": "Ping @PaulWessel @joa-quim @leouieda @weiji14 for thoughts.",
            "created_at": "2020-06-23T06:16:46Z",
            "html_url": "https://github.com/GenericMappingTools/pygmt/issues/489#issuecomment-647932985",
            "id": 647932985,
            "issue_url": "https://api.github.com/repos/GenericMappingTools/pygmt/issues/489",
            "node_id": "MDEyOklzc3VlQ29tbWVudDY0NzkzMjk4NQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/GenericMappingTools/pygmt/issues/comments/647932985/reactions"
            },
            "updated_at": "2020-06-23T06:16:46Z",
            "url": "https://api.github.com/repos/GenericMappingTools/pygmt/issues/comments/647932985",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/3974108?v=4",
                "events_url": "https://api.github.com/users/seisman/events{/privacy}",
                "followers_url": "https://api.github.com/users/seisman/followers",
                "following_url": "https://api.github.com/users/seisman/following{/other_user}",
                "gists_url": "https://api.github.com/users/seisman/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/seisman",
                "id": 3974108,
                "login": "seisman",
                "node_id": "MDQ6VXNlcjM5NzQxMDg=",
                "organizations_url": "https://api.github.com/users/seisman/orgs",
                "received_events_url": "https://api.github.com/users/seisman/received_events",
                "repos_url": "https://api.github.com/users/seisman/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/seisman/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/seisman/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/seisman"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "First, just some minor corrections.  6.1 does not affect how 01s and 03s are handled which were always tiled and only tiles in the region were downloaded.  Presumably, you never called load_earth_relief () on those SRTM datasets.  However, it is true for 15s through 05m that these are now also tiled.\r\nSecond, could you make _load_earth_relief_ (which I assume has an implicit region of -180/80/-90/90) call `gmt grdcut -Rd `on the resolution remtoe data you want, and then it will assemble the global grid for you, including the resampling of 15s if 03s or 01s is used.  First time it will download all tiles (if tiled), the next time it is local.  I don't know how pyGMT handles grid internally so you could either have **grdcut** write to a netCDF file and then you read that as you did before, else you set up a virtual grid and that is what **grdcut** should return directly.\r\n",
            "created_at": "2020-06-23T06:55:12Z",
            "html_url": "https://github.com/GenericMappingTools/pygmt/issues/489#issuecomment-647947764",
            "id": 647947764,
            "issue_url": "https://api.github.com/repos/GenericMappingTools/pygmt/issues/489",
            "node_id": "MDEyOklzc3VlQ29tbWVudDY0Nzk0Nzc2NA==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/GenericMappingTools/pygmt/issues/comments/647947764/reactions"
            },
            "updated_at": "2020-06-23T06:55:12Z",
            "url": "https://api.github.com/repos/GenericMappingTools/pygmt/issues/comments/647947764",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/26473567?v=4",
                "events_url": "https://api.github.com/users/PaulWessel/events{/privacy}",
                "followers_url": "https://api.github.com/users/PaulWessel/followers",
                "following_url": "https://api.github.com/users/PaulWessel/following{/other_user}",
                "gists_url": "https://api.github.com/users/PaulWessel/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/PaulWessel",
                "id": 26473567,
                "login": "PaulWessel",
                "node_id": "MDQ6VXNlcjI2NDczNTY3",
                "organizations_url": "https://api.github.com/users/PaulWessel/orgs",
                "received_events_url": "https://api.github.com/users/PaulWessel/received_events",
                "repos_url": "https://api.github.com/users/PaulWessel/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/PaulWessel/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/PaulWessel/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/PaulWessel"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Presumably, you never called load_earth_relief () on those SRTM datasets. \r\n\r\nYes, 03s and 01s are never implemented or supported in PyGMT.\r\n\r\n> Second, could you make _load_earth_relief_ (which I assume has an implicit region of -180/80/-90/90) call `gmt grdcut -Rd `on the resolution remtoe data you want, and then it will assemble the global grid for you, including the resampling of 15s if 03s or 01s is used. First time it will download all tiles (if tiled), the next time it is local. I don't know how pyGMT handles grid internally so you could either have **grdcut** write to a netCDF file and then you read that as you did before, else you set up a virtual grid and that is what **grdcut** should return directly.\r\n\r\nIt sounds a great solution!",
            "created_at": "2020-06-23T07:01:46Z",
            "html_url": "https://github.com/GenericMappingTools/pygmt/issues/489#issuecomment-647950665",
            "id": 647950665,
            "issue_url": "https://api.github.com/repos/GenericMappingTools/pygmt/issues/489",
            "node_id": "MDEyOklzc3VlQ29tbWVudDY0Nzk1MDY2NQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/GenericMappingTools/pygmt/issues/comments/647950665/reactions"
            },
            "updated_at": "2020-06-23T07:01:46Z",
            "url": "https://api.github.com/repos/GenericMappingTools/pygmt/issues/comments/647950665",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/3974108?v=4",
                "events_url": "https://api.github.com/users/seisman/events{/privacy}",
                "followers_url": "https://api.github.com/users/seisman/followers",
                "following_url": "https://api.github.com/users/seisman/following{/other_user}",
                "gists_url": "https://api.github.com/users/seisman/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/seisman",
                "id": 3974108,
                "login": "seisman",
                "node_id": "MDQ6VXNlcjM5NzQxMDg=",
                "organizations_url": "https://api.github.com/users/seisman/orgs",
                "received_events_url": "https://api.github.com/users/seisman/received_events",
                "repos_url": "https://api.github.com/users/seisman/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/seisman/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/seisman/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/seisman"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Hi guys,\r\nJust a comment from a new user. \r\nIt works fine for me when I run\r\n```python\r\ntopo=pygmt.datasets.load_earth_relief(resolution='06m')\r\n```\r\n\r\nHowever for a resolution of '05m', pygmt cannot find the files. I got this error message\r\n\r\n```python\r\n\r\ngmtwhich [NOTICE]: Remote data courtesy of GMT data server OCEANIA [https://oceania.generic-mapping-tools.org]\r\ngmtwhich [NOTICE]: Earth Relief at 5x5 arc minutes from Gaussian Cartesian filtering (9 km fullwidth) of SRTM15+V2.1 [Tozer et al., 2019].\r\ngmtwhich [NOTICE]:   -> Download 180x180 degree grid tile (earth_relief_05m_p): S90W180\r\ngmtwhich [NOTICE]:   -> Download 180x180 degree grid tile (earth_relief_05m_p): S90E000\r\ngmtwhich [ERROR]: Tile @S90W180.earth_relief_05m_p.nc not found!\r\ngmtwhich [ERROR]: Tile @S90E000.earth_relief_05m_p.nc not found!\r\n---------------------------------------------------------------------------\r\nFileNotFoundError                         Traceback (most recent call last)\r\n<ipython-input-46-49018afdaf86> in <module>\r\n----> 1 topo=pygmt.datasets.load_earth_relief(resolution='05m')\r\n\r\n~/anaconda2/envs/analysis_eel_data/lib/python3.8/site-packages/pygmt/datasets/earth_relief.py in load_earth_relief(resolution)\r\n     37     \"\"\"\r\n     38     _is_valid_resolution(resolution)\r\n---> 39     fname = which(\"@earth_relief_{}\".format(resolution), download=\"u\")\r\n     40     grid = xr.open_dataarray(fname)\r\n     41     # Add some metadata to the grid\r\n\r\n~/anaconda2/envs/analysis_eel_data/lib/python3.8/site-packages/pygmt/helpers/decorators.py in new_module(*args, **kwargs)\r\n    192                 if alias in kwargs:\r\n    193                     kwargs[arg] = kwargs.pop(alias)\r\n--> 194             return module_func(*args, **kwargs)\r\n    195 \r\n    196         new_module.aliases = aliases\r\n\r\n~/anaconda2/envs/analysis_eel_data/lib/python3.8/site-packages/pygmt/modules.py in which(fname, **kwargs)\r\n    144         path = tmpfile.read().strip()\r\n    145     if not path:\r\n--> 146         raise FileNotFoundError(\"File '{}' not found.\".format(fname))\r\n    147     return path\r\n    148 \r\n\r\nFileNotFoundError: File '@earth_relief_05m' not found.\r\n\r\n```\r\n\r\nI am wondering if it is because pygmt is looking for files named ```@***********``` while my local files  don't have the same exact name (they dont start with a ```@```. See what a ```which``` command return for me:\r\n\r\n```python\r\npygmt.which('S90W180.earth_relief_05m_p.nc')\r\n```\r\n```code\r\n'/Users/locupe/.gmt/S90W180.earth_relief_05m_p.nc'\r\n```\r\n\r\nI will just use the 6m files right now, but I thought I would flag this up",
            "created_at": "2020-07-09T10:11:45Z",
            "html_url": "https://github.com/GenericMappingTools/pygmt/issues/489#issuecomment-656039283",
            "id": 656039283,
            "issue_url": "https://api.github.com/repos/GenericMappingTools/pygmt/issues/489",
            "node_id": "MDEyOklzc3VlQ29tbWVudDY1NjAzOTI4Mw==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/GenericMappingTools/pygmt/issues/comments/656039283/reactions"
            },
            "updated_at": "2020-07-09T10:11:45Z",
            "url": "https://api.github.com/repos/GenericMappingTools/pygmt/issues/comments/656039283",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10154151?v=4",
                "events_url": "https://api.github.com/users/lhoupert/events{/privacy}",
                "followers_url": "https://api.github.com/users/lhoupert/followers",
                "following_url": "https://api.github.com/users/lhoupert/following{/other_user}",
                "gists_url": "https://api.github.com/users/lhoupert/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lhoupert",
                "id": 10154151,
                "login": "lhoupert",
                "node_id": "MDQ6VXNlcjEwMTU0MTUx",
                "organizations_url": "https://api.github.com/users/lhoupert/orgs",
                "received_events_url": "https://api.github.com/users/lhoupert/received_events",
                "repos_url": "https://api.github.com/users/lhoupert/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lhoupert/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lhoupert/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lhoupert"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Thanks for the detailed writeup! As @seisman mentioned above, the problem with the \"earth_relief_05m\" grid (and higher resolution ones) is that it's actually tiled (specifically into two tiles, S90W180 and S90E000 as you've discovered), but we're trying to read it using `xr.open_dataarray` that only expects one NetCDF file. We'll definitely have to fix this in the redesign.",
            "created_at": "2020-07-09T10:30:36Z",
            "html_url": "https://github.com/GenericMappingTools/pygmt/issues/489#issuecomment-656048180",
            "id": 656048180,
            "issue_url": "https://api.github.com/repos/GenericMappingTools/pygmt/issues/489",
            "node_id": "MDEyOklzc3VlQ29tbWVudDY1NjA0ODE4MA==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/GenericMappingTools/pygmt/issues/comments/656048180/reactions"
            },
            "updated_at": "2020-07-09T10:30:36Z",
            "url": "https://api.github.com/repos/GenericMappingTools/pygmt/issues/comments/656048180",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/23487320?v=4",
                "events_url": "https://api.github.com/users/weiji14/events{/privacy}",
                "followers_url": "https://api.github.com/users/weiji14/followers",
                "following_url": "https://api.github.com/users/weiji14/following{/other_user}",
                "gists_url": "https://api.github.com/users/weiji14/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/weiji14",
                "id": 23487320,
                "login": "weiji14",
                "node_id": "MDQ6VXNlcjIzNDg3MzIw",
                "organizations_url": "https://api.github.com/users/weiji14/orgs",
                "received_events_url": "https://api.github.com/users/weiji14/received_events",
                "repos_url": "https://api.github.com/users/weiji14/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/weiji14/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/weiji14/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/weiji14"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/GenericMappingTools/pygmt/issues/489/comments",
    "created_at": "2020-06-23T06:09:35Z",
    "events_url": "https://api.github.com/repos/GenericMappingTools/pygmt/issues/489/events",
    "html_url": "https://github.com/GenericMappingTools/pygmt/issues/489",
    "id": 643560653,
    "labels": [
        {
            "color": "ee0701",
            "default": true,
            "description": "Something isn't working",
            "id": 563309827,
            "name": "bug",
            "node_id": "MDU6TGFiZWw1NjMzMDk4Mjc=",
            "url": "https://api.github.com/repos/GenericMappingTools/pygmt/labels/bug"
        },
        {
            "color": "0e8a16",
            "default": true,
            "description": "Helping hands are appreciated",
            "id": 729911674,
            "name": "help wanted",
            "node_id": "MDU6TGFiZWw3Mjk5MTE2NzQ=",
            "url": "https://api.github.com/repos/GenericMappingTools/pygmt/labels/help%20wanted"
        },
        {
            "color": "a2eeef",
            "default": true,
            "description": "Improving an existing feature",
            "id": 1992764722,
            "name": "enhancement",
            "node_id": "MDU6TGFiZWwxOTkyNzY0NzIy",
            "url": "https://api.github.com/repos/GenericMappingTools/pygmt/labels/enhancement"
        }
    ],
    "labels_url": "https://api.github.com/repos/GenericMappingTools/pygmt/issues/489/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "MDU6SXNzdWU2NDM1NjA2NTM=",
    "number": 489,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/GenericMappingTools/pygmt/issues/489/reactions"
    },
    "repository_url": "https://api.github.com/repos/GenericMappingTools/pygmt",
    "state": "closed",
    "state_reason": "completed",
    "timeline_url": "https://api.github.com/repos/GenericMappingTools/pygmt/issues/489/timeline",
    "title": "Redesign of the load_earth_relief() function",
    "updated_at": "2020-07-23T06:00:43Z",
    "url": "https://api.github.com/repos/GenericMappingTools/pygmt/issues/489",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/3974108?v=4",
        "events_url": "https://api.github.com/users/seisman/events{/privacy}",
        "followers_url": "https://api.github.com/users/seisman/followers",
        "following_url": "https://api.github.com/users/seisman/following{/other_user}",
        "gists_url": "https://api.github.com/users/seisman/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/seisman",
        "id": 3974108,
        "login": "seisman",
        "node_id": "MDQ6VXNlcjM5NzQxMDg=",
        "organizations_url": "https://api.github.com/users/seisman/orgs",
        "received_events_url": "https://api.github.com/users/seisman/received_events",
        "repos_url": "https://api.github.com/users/seisman/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/seisman/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/seisman/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/seisman"
    }
}